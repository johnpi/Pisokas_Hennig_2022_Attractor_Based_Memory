# -*- coding: utf-8 -*-

# This utility post-processes files generated by the utility merge_all_files_into_one_keep_only_thetas.py 
# and adds descriptive statistics. The statistics are only applicable to unwrapped data not to circular ones.

# Compatibility between Python 2 and Python 3
from __future__ import division, print_function, unicode_literals, absolute_import

# Load libraries
import sys
import os
import argparse # For command line argument parsing
import math
import numpy as np
from scipy import stats

from utility_functions import *
from Python_Libs.utility_functions import *

DEBUG = False


def add_more_stats(output_file, input_file, unwrap_angles):
    """
        Reads one of the files with the already combined collected data records,  
        calculate and add to the data structure more descriptive statistics, 
        mean, median, var, std. 
        output_file      : is the output filename.
        input_file       : is the input filenames.        
    """
    
    # Now selected from the command line
    if 'unwrapped' not in input_file and unwrap_angles == False:
        print('WARNING: The descriptive statistics this utility adds assume unwrapped data.')
        print('WARNING: The mean, median, var, and std are not circular statistics. The')
        print('WARNING: given file does not contain the string "unwrapped" in its name. If')
        print('WARNING: the data are circular data one option is to use the --unwrap-angles')
        print('WARNING: switch that will unwrap the data before calculating the descriptive')
        print('WARNING: statistics. The results will be written in the output file, ')
        print('WARNING: use with consideration to the above.')
    
    if os.path.exists(input_file):
        # Save all data in the file
        data = np.load(input_file, allow_pickle=True, encoding='bytes')
    else:
        print('ERROR: File does not exist: {:s}'.format(input_file))
        exit(1)

    if os.path.exists(output_file):
        print('ERROR: File already exists: {:s}'.format(input_file))
        print('ERROR: exiting...')
        exit(1)
    
    # Expected structure of data in the files
    # data.item()[model][poisson_neuron_noise][tau][neurons_num].keys()
    # Iterate over all dictionary hierarchy and process time series
    for model in data.item().keys():                                                     # eg dict_keys(['NMDA', 'EC_LV_1'])
        for poisson_neuron_noise in data.item()[model].keys():                           # eg dict_keys([0.001, 0.002, 0.003, 0.004, 0.005, 0.006, 0.007, 0.008, 0.009])
            for tau in data.item()[model][poisson_neuron_noise].keys():                  # eg dict_keys(['complex'])
                for neurons_num in data.item()[model][poisson_neuron_noise][tau].keys(): # eg dict_keys([128, 256, 512, 1024, 2048, 4096, 8192])
                    # Check that is a valid record and that we have not written the new data entries already
                    if data.item()[model][poisson_neuron_noise][tau][neurons_num] is not None and 'theta_ts_list' in data.item()[model][poisson_neuron_noise][tau][neurons_num].keys() and 'MEAN' not in data.item()[model][poisson_neuron_noise][tau][neurons_num].keys():
                        # Get the time series list
                        theta_ts_list = data.item()[model][poisson_neuron_noise][tau][neurons_num]['theta_ts_list']
                        stimulus_center_deg = data.item()[model][poisson_neuron_noise][tau][neurons_num]['stimulus_center_deg']
                        # Unwrap the time series if required, the stats below are valid only for unwrapped data
                        if not unwrap_angles:
                            theta_ts_list_unwrapped = theta_ts_list
                        else:
                            theta_ts_list_unwrapped = []
                            for theta_ts in theta_ts_list:
                                theta_ts_list_unwrapped.append(unwrap_modulo_time_series(theta_ts, modulo = 360))
                        # Calculate the descriptive statistics of the unwrapped time series
                        MEAN   = np.mean(  theta_ts_list_unwrapped, axis=0)
                        MEDIAN = np.median(theta_ts_list_unwrapped, axis=0)
                        VAR    = np.var(   theta_ts_list_unwrapped, axis=0)
                        STD    = np.std(   theta_ts_list_unwrapped, axis=0)
                        MAD    = stats.median_abs_deviation(theta_ts_list_unwrapped, axis=0)
                        
                        # Add entries in the dictionary with the descriptive statistics
                        data.item()[model][poisson_neuron_noise][tau][neurons_num]['MEAN']   = MEAN
                        data.item()[model][poisson_neuron_noise][tau][neurons_num]['MEDIAN'] = MEDIAN
                        data.item()[model][poisson_neuron_noise][tau][neurons_num]['VAR']    = VAR
                        data.item()[model][poisson_neuron_noise][tau][neurons_num]['STD']    = STD
                        data.item()[model][poisson_neuron_noise][tau][neurons_num]['MAD']    = MAD
    
    # Save all data in the file
    np.save(output_file, data, allow_pickle=True)



# New command line options set up
parser = argparse.ArgumentParser(description='This utility post-processes files generated by the utility merge_all_files_into_one_keep_only_thetas.py and adds descriptive statistics. The statistics are onlhy applicable to unwrapped data not to circular ones.')

# File to write all data to
parser.add_argument('-o', '--output-file', type=str, dest='output_file', required=True,
                   help='Output filename to write all combined data to.')
parser.add_argument('-i', '--input-file', type=str, dest='input_file', required=True,
help='Filename of .npy file to read data from, process them, and store them to the output file.')

parser.add_argument('-u', '--unwrap-angles', action='store_true', dest='unwrap_angles', required=False, default=False,
help='Switch: If provided heading angles are unwrapped using modulo 360 so after 360 is 361 and so on. Default is to not unwrap heading values so after 360 is 0.')


# Parse the command line arguments
args = parser.parse_args()

#input_files = args.input_files
input_file = args.input_file
output_file = args.output_file
#max_entities = args.max_entities
unwrap_angles = args.unwrap_angles

# Was
# merge_file(merged_data_filename, collected_data_files_list)
add_more_stats(output_file, input_file, unwrap_angles)
